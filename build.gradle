// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        applicationModules = ['app']
        javaModules = ['jarlibrary', 'commons', 'log', 'encrypt', 'regex', 'type', 'anull', 'atry', 'exception', 'string']
        androidModules = ['aarlibrary']
        def versionFile = rootProject.file('version.properties')
        if (versionFile.exists()) {
            def input = versionFile.newInputStream()
            def p = new Properties()
            p.load(input)
            p.forEach { k, v ->
                ext.set(k, v)
            }
        }
        def publicFile = rootProject.file('publish.properties')
        hasPublic = publicFile.exists()
        if (hasPublic) {
            def input = publicFile.newInputStream()
            pub = new Properties()
            pub.load(input)
        }
    }
    repositories {
        google()
        jcenter()
    }
    dependencies {
        //noinspection GradleDependency
        classpath 'com.android.tools.build:gradle:' + studio_version
        //noinspection DifferentKotlinGradleVersion
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:' + kotlin_version
        classpath 'com.github.dcendents:android-maven-gradle-plugin:' + jitpack_android_version
        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:' + dokka_version
        classpath 'org.jetbrains.dokka:dokka-android-gradle-plugin:' + dokka_version
        classpath 'com.novoda:bintray-release:' + bintray_version
    }
}

allprojects {
    group = 'cc.aoeiuv020'
    version = self_version
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url "https://dl.bintray.com/aoeiuv020/maven" }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
    tasks.withType(Javadoc) {
        enabled = false
        options {
            encoding 'UTF-8'
            charSet 'UTF-8'
            links "http://docs.oracle.com/javase/7/docs/api"
        }
    }
}

// app模块，
// 多个app模块可能导致AndroidStudio3.1.3右侧gradle面板的任务崩溃，原因和细节不明，
// 不影响AndroidStudio的run, 和gradlew命令行，
applicationModules.forEach { name ->
    project(name) {
        apply plugin: 'com.android.application'
        apply plugin: 'kotlin-android'
        apply plugin: 'kotlin-android-extensions'
        apply plugin: 'kotlin-kapt'

        android {
            compileSdkVersion compile_version.toInteger()
            flavorDimensions "tier"
            defaultConfig {
                minSdkVersion min_version.toInteger()
                targetSdkVersion target_version.toInteger()
                versionCode version_code.toInteger()
                versionName version_name
                multiDexEnabled true
                testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
                setProperty("archivesBaseName", "$rootProject.name-$versionName")
                vectorDrawables.useSupportLibrary = true
            }
            buildTypes {
                release {
                    minifyEnabled true
                    useProguard false
                    shrinkResources true
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                }
            }

            def signingFile = rootProject.file('signing.properties')
            if (signingFile.exists()) {
                def input = signingFile.newInputStream()
                def p = new Properties()
                p.load(input)
                signingConfigs {
                    config {
                        keyAlias p['keyAlias']
                        keyPassword p['keyPassword']
                        storeFile file(p['storeFile'])
                        storePassword p['storePassword']
                        v1SigningEnabled true
                        v2SigningEnabled true
                    }
                }
                buildTypes {
                    debug {
                        signingConfig signingConfigs.config
                    }
                    release {
                        signingConfig signingConfigs.config
                    }
                }
            }

            applicationVariants.all { variant ->
                if (variant.buildType.name == 'release') {
                    variant.assemble.doLast {
                        copy {
                            from variant.outputs[0].outputFile
                            into "${rootDir}/release"
                        }
                        if (variant.mappingFile != null) {
                            copy {
                                from variant.mappingFile
                                into "${rootDir}/release"
                                rename { String fileName ->
                                    "$rootProject.name-mapping-$versionName-${variant.name}.txt"
                                }
                            }
                        }
                    }
                }
            }
        }

        // pc端的单元测试移除无法使用的slf4j-android，
        // 关键是runtimeOnly依赖不只加入apk中，test也会加上，
        // 在allprojects设置没用，apply plugin后才存在这些configurations,
        configurations.findAll { it.name.startsWith('test') }.each { conf ->
            conf.exclude group: "org.slf4j", module: "slf4j-android"
        }

        dependencies {
            implementation 'com.android.support:support-v4:' + support_version
            implementation 'com.android.support:appcompat-v7:' + support_version
            testImplementation 'junit:junit:' + junit_version
            androidTestImplementation 'com.android.support.test:runner:' + test_runner_version
            androidTestImplementation 'com.android.support.test.espresso:espresso-core:' + test_espresso_version
            implementation 'com.android.support:multidex:' + multidex_version
            testImplementation 'org.mockito:mockito-core:' + mockito_version
            implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:' + kotlin_version
            implementation 'org.jetbrains.anko:anko-commons:' + anko_version
            implementation 'org.slf4j:slf4j-api:' + slf4j_version
            runtimeOnly 'org.slf4j:slf4j-android:' + slf4j_version
            testImplementation 'org.slf4j:slf4j-simple:' + slf4j_version
        }
    }
}

// java模块，
javaModules.forEach { name ->
    project(name) {
        apply plugin: 'java-library'
        apply plugin: 'kotlin'
        apply plugin: 'maven'
        apply plugin: 'org.jetbrains.dokka'
        apply plugin: 'com.novoda.bintray-release'

        dependencies {
            testImplementation 'junit:junit:' + junit_version
            implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:' + kotlin_version
            implementation 'org.slf4j:slf4j-api:' + slf4j_version
            testImplementation 'org.slf4j:slf4j-simple:' + slf4j_version
        }

        sourceCompatibility = "1.7"
        targetCompatibility = "1.7"

        task sourcesJar(type: Jar, dependsOn: classes) {
            group = 'jar'
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
            jdkVersion = 7
            outputFormat = 'javadoc'
            outputDirectory = "$buildDir/dokkadoc"
        }

        task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
            group = 'jar'
            classifier = 'javadoc'
            from "$buildDir/dokkadoc"
        }

        artifacts {
            archives sourcesJar
            archives javadocJar
        }

        // 如果没有public.properties或者没有key属性，就不上传，也就是dryRun=true,
        publish {
            userOrg = 'aoeiuv020'
            bintrayUser = userOrg
            groupId = group
            if (hasPublic) {
                dryRun = false
                if (pub.user?.trim()) {
                    bintrayUser = pub.user
                    userOrg = bintrayUser
                }
                if (pub.key?.trim()) {
                    bintrayKey = pub.key
                } else {
                    dryRun = true
                }
                if (pub.group?.trim()) {
                    groupId = pub.group
                }
            }
            artifactId = name
            publishVersion = version
            desc = "Java library $name."
            website = 'https://github.com/AoEiuV020'
        }
        // 删除bintray-release插件自带的javadocJar和sourceJar任务，
        // 因为不支持kotlin, 不支持安卓，
        bintrayUpload.dependsOn('assemble')
        tasks.whenTaskAdded { task ->
            if ([
                    'genereateJavadocsJarForMavenPublication',
                    'genereateSourcesJarForMavenPublication'
            ].contains(task.name)) {
                task.enabled = false
            }
        }
    }
}

// android模块，
androidModules.forEach { name ->
    project(name) {
        apply plugin: 'com.android.library'
        apply plugin: 'kotlin-android'
        apply plugin: 'kotlin-android-extensions'
        apply plugin: 'com.github.dcendents.android-maven'
        apply plugin: 'org.jetbrains.dokka-android'
        apply plugin: 'com.novoda.bintray-release'

        android {
            compileSdkVersion compile_version.toInteger()
            defaultConfig {
                minSdkVersion min_version.toInteger()
                targetSdkVersion target_version.toInteger()
                versionCode 1
                versionName version

                testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
            }

            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                }
            }
        }

        // pc端的单元测试移除无法使用的slf4j-android，
        // 关键是runtimeOnly依赖不只加入apk中，test也会加上，
        // 在allprojects设置没用，apply plugin后才存在这些configurations,
        configurations.findAll { it.name.startsWith('test') }.each { conf ->
            conf.exclude group: "org.slf4j", module: "slf4j-android"
        }

        dependencies {
            testImplementation 'junit:junit:' + junit_version
            androidTestImplementation 'com.android.support.test:runner:' + test_runner_version
            androidTestImplementation 'com.android.support.test.espresso:espresso-core:' + test_espresso_version
            implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:' + kotlin_version
            implementation 'org.jetbrains.anko:anko-commons:' + anko_version
            implementation 'org.slf4j:slf4j-api:' + slf4j_version
            runtimeOnly 'org.slf4j:slf4j-android:' + slf4j_version
            testImplementation 'org.slf4j:slf4j-simple:' + slf4j_version
        }

        task sourcesJar(type: Jar) {
            group = 'jar'
            from android.sourceSets.main.java.srcDirs
            classifier = 'sources'
        }

        task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaAndroidTask) {
            jdkVersion = 7
            outputFormat = 'javadoc'
            outputDirectory = "$buildDir/dokkadoc"
        }

        task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
            group = 'jar'
            classifier = 'javadoc'
            from "$buildDir/dokkadoc"
        }

        artifacts {
            archives sourcesJar
            archives javadocJar
        }

        // 如果没有public.properties或者没有key属性，就不上传，也就是dryRun=true,
        publish {
            userOrg = 'aoeiuv020'
            bintrayUser = userOrg
            groupId = group
            if (hasPublic) {
                dryRun = false
                if (pub.user?.trim()) {
                    bintrayUser = pub.user
                    userOrg = bintrayUser
                }
                if (pub.key?.trim()) {
                    bintrayKey = pub.key
                } else {
                    dryRun = true
                }
                if (pub.group?.trim()) {
                    groupId = pub.group
                }
            }
            artifactId = name
            publishVersion = version
            desc = "Android library $name."
            website = 'https://github.com/AoEiuV020'
        }
        // 删除bintray-release插件自带的javadocJar和sourceJar任务，
        // 因为不支持kotlin, 不支持安卓，
        bintrayUpload.dependsOn('assemble')
        tasks.whenTaskAdded { task ->
            if ([
                    'genereateJavadocsJarForReleasePublication',
                    'genereateSourcesJarForReleasePublication'
            ].contains(task.name)) {
                task.enabled = false
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
