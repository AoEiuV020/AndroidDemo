// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        applicationModules = ['app']
        javaModules = []
        androidModules = []
        def versionFile = rootProject.file('version.properties')
        if (versionFile.exists()) {
            def input = versionFile.newInputStream()
            def p = new Properties()
            p.load(input)
            p.forEach { k, v ->
                ext.set(k, v)
            }
        }
    }
    repositories {
        google()
        jcenter()
    }
    dependencies {
        //noinspection GradleDependency
        classpath "com.android.tools.build:gradle:$studio_version"
        //noinspection DifferentKotlinGradleVersion
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
    }
}

allprojects {
    group = 'com.github.AoEiuV020'
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
    }
}

// app模块，
// 多个app模块可能导致AndroidStudio3.1.3右侧gradle面板的任务崩溃，原因和细节不明，
// 不影响AndroidStudio的run, 和gradlew命令行，
applicationModules.forEach { name ->
    project(name) {
        apply plugin: 'com.android.application'
        apply plugin: 'kotlin-android'
        apply plugin: 'kotlin-android-extensions'
        apply plugin: 'kotlin-kapt'
        android {
            compileSdkVersion compile_version.toInteger()
            flavorDimensions "tier"
            defaultConfig {
                minSdkVersion min_version.toInteger()
                targetSdkVersion target_version.toInteger()
                versionCode version_code.toInteger()
                versionName version_name
                multiDexEnabled true
                testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
                setProperty("archivesBaseName", "$rootProject.name-$versionName")
                vectorDrawables.useSupportLibrary = true
            }
            buildTypes {
                release {
                    minifyEnabled true
                    useProguard true
                    shrinkResources true
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                }
            }

            def signingFile = rootProject.file('signing.properties')
            if(signingFile.exists()){
                def input = signingFile.newInputStream()
                def p = new Properties()
                p.load(input)
                signingConfigs {
                    config {
                        keyAlias p['keyAlias']
                        keyPassword p['keyPassword']
                        storeFile file(p['storeFile'])
                        storePassword p['storePassword']
                        v1SigningEnabled true
                        v2SigningEnabled true
                    }
                }
                buildTypes {
                    debug {
                        signingConfig signingConfigs.config
                    }
                    release {
                        signingConfig signingConfigs.config
                    }
                }
            }

            applicationVariants.all { variant ->
                if (variant.buildType.name == 'release') {
                    variant.assemble.doLast {
                        copy {
                            from variant.outputs[0].outputFile
                            into "${rootDir}/release"
                        }
                        if (variant.mappingFile != null) {
                            copy {
                                from variant.mappingFile
                                into "${rootDir}/release"
                                rename { String fileName ->
                                    "$rootProject.name-mapping-$versionName-${variant.name}.txt"
                                }
                            }
                        }
                    }
                }
            }
        }

        dependencies {
            implementation "com.android.support:support-v4:$support_version"
            implementation "com.android.support:appcompat-v7:$support_version"
            testImplementation "junit:junit:$junit_version"
            androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1', {
                exclude group: 'com.android.support', module: 'support-annotations'
            })
            implementation 'com.android.support:multidex:1.0.3'
            testImplementation 'org.mockito:mockito-core:2.15.0'
            implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
            implementation "org.jetbrains.anko:anko-commons:$anko_version"
            implementation "org.slf4j:slf4j-api:$slf4j_version"
            debugRuntimeOnly "org.slf4j:slf4j-android:$slf4j_version"
            testImplementation "org.slf4j:slf4j-simple:$slf4j_version"
        }
    }
}

// java模块，
javaModules.forEach { name ->
    project(name) {
        apply plugin: 'java-library'
        apply plugin: 'kotlin'
        apply plugin: 'maven'

        dependencies {
            testImplementation "junit:junit:$junit_version"
            implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
            implementation "org.slf4j:slf4j-api:$slf4j_version"
            testImplementation "org.slf4j:slf4j-simple:$slf4j_version"
        }

        sourceCompatibility = "1.7"
        targetCompatibility = "1.7"

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            javadoc.failOnError false
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            archives sourcesJar
            archives javadocJar
        }
    }
}

// android模块，
androidModules.forEach { name ->
    project(name) {
        apply plugin: 'com.android.library'
        apply plugin: 'kotlin-android'
        apply plugin: 'kotlin-android-extensions'
        apply plugin: 'com.github.dcendents.android-maven'

        android {
            compileSdkVersion compile_version.toInteger()
            defaultConfig {
                minSdkVersion min_version.toInteger()
                targetSdkVersion target_version.toInteger()
                versionCode 1
                versionName "1.0"

                testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
            }

            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                }
            }
        }

        dependencies {
            testImplementation "junit:junit:$junit_version"
            androidTestImplementation 'com.android.support.test:runner:1.0.2'
            androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
            implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
            implementation "org.jetbrains.anko:anko-commons:$anko_version"
        }

        task sourcesJar(type: Jar) {
            from android.sourceSets.main.java.srcDirs
            classifier = 'sources'
        }

        task javadoc(type: Javadoc) {
            failOnError false
            source = android.sourceSets.main.java.sourceFiles
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            classpath += configurations.compile
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            archives sourcesJar
            archives javadocJar
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}